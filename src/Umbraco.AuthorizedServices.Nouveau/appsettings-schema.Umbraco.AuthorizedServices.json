{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "UmbracoAuthorizedServices",
  "type": "object",
  "properties": {
    "Umbraco": {
      "$ref": "#/definitions/UmbracoDefinition"
    }
  },
  "definitions": {
    "UmbracoDefinition": {
      "type": "object",
      "description": "Configuration container for Umbraco Authorized Services.",
      "properties": {
        "AuthorizedServices": {
          "$ref": "#/definitions/AuthorizedServicesSettings"
        }
      }
    },
    "AuthorizedServicesSettings": {
      "type": "object",
      "description": "Configuration options for the Authorized Services.",
      "properties": {
        "TokenEncryptionKey": {
          "type": "string",
          "description": "Gets or sets the token encryption key."
        },
        "Services": {
          "type": "object",
          "description": "Gets or sets the definitions for the services.",
          "additionalProperties": {
            "$ref": "#/definitions/ServiceDetailSettings"
          }
        }
      }
    },
    "ServiceDetailSettings": {
      "type": "object",
      "description": "Strongly typed configuration for a service.",
      "properties": {
        "Alias": {
          "type": "string",
          "description": "Get or sets the service alias."
        },
        "DisplayName": {
          "type": "string",
          "description": "Gets or sets the display name for the service."
        },
        "AuthenticationMethod": {
          "type": "string",
          "description": "Gets or sets the authentication method for the service."
        },
        "ClientCredentialsProvision": {
          "type": "string",
          "description": "Gets or sets the provision type for OAuth2 client credentials authorization."
        },
        "ApiHost": {
          "type": "string",
          "description": "Gets or sets the host name for the service's API."
        },
        "IdentityHost": {
          "type": "string",
          "description": "Gets or sets the path for requests for authentication with the service."
        },
        "TokenHost": {
          "type": "string",
          "description": "Gets or sets the path for requests for working with service tokens."
        },
        "RequestIdentityPath": {
          "type": "string",
          "description": "Gets or sets the path for requests for authentication with the service."
        },
        "CanManuallyProvideToken": {
          "type": "boolean",
          "description": "Get or sets a value indicating whether an administrator can manually add token."
        },
        "CanManuallyProvideApiKey": {
          "type": "boolean",
          "description": "Get or sets a value indicating whether an administrator can manually add API key."
        },
        "CanExchangeToken": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the access token can be exchanged with a long lived one."
        },
        "ExchangeTokenProvision": {
          "$ref": "#/definitions/ExchangeTokenProvision"
        },
        "AuthorizationUrlRequiresRedirectUrl": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether authorization requests require sending the redirect URL."
        },
        "RequestTokenPath": {
          "type": "string",
          "description": "Gets or sets the path for requests for requesting a token from the service."
        },
        "RequestAuthorizationPath": {
          "type": "string",
          "description": "Gets or sets the path for requests for requesting authorization from the service."
        },
        "RequestTokenFormat": {
          "type": "string",
          "description": "Gets or sets the format to use for encoding the request for a token."
        },
        "JsonSerializer": {
          "type": "string",
          "description": "Gets or sets the JSON serializer to use when building requests and deserializing responses."
        },
        "AuthorizationRequestRequiresAuthorizationHeaderWithBasicToken": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the basic token should be included in the token request."
        },
        "ApiKey": {
          "type": "string",
          "description": "Gets or sets the API Key for the service."
        },
        "ApiKeyProvision": {
          "$ref": "#/definitions/ApiKeyProvision"
        },
        "ClientId": {
          "type": "string",
          "description": "Gets or sets the client Id for the app registered with the service."
        },
        "ClientSecret": {
          "type": "string",
          "description": "Gets or sets the client secret for the app registered with the service."
        },
        "UseProofKeyForCodeExchange": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the OAuth flow should use Proof of Key Code Exchange (PKCE)."
        },
        "Scopes": {
          "type": "string",
          "description": "Gets or sets the scopes required for working with the service."
        },
        "IncludeScopesInAuthorizationRequest": {
          "type": "boolean",
          "description": "Gets or sets whether the scopes should be included in the request body during the authorization request."
        },
        "AccessTokenResponseKey": {
          "type": "string",
          "description": "Gets or sets the key expected in the token response that identifies the access token."
        },
        "RefreshTokenResponseKey": {
          "type": "string",
          "description": "Gets or sets the key expected in the token response that identifies the refresh token."
        },
        "ExpiresInResponseKey": {
          "type": "string",
          "description": "Gets or sets the key expected in the token response that identifies when the accesstoken expires."
        },
        "SampleRequest": {
          "type": "string",
          "description": "Gets or sets the path to a GET request used as a sample for verifying the service in the backoffice."
        },
        "RefreshAccessTokenWhenExpiresWithin": {
          "type": "string",
          "description": "Gets or sets the time interval for expiration of access tokens."
        }
      }
    },
    "ApiKeyProvision": {
      "type": "object",
      "description": "Strongly typed configuration for provisioning options for an API key based authentication.",
      "properties": {
        "Method": {
          "type": "string",
          "description": "Gets or sets how the API key should be included in the request."
        },
        "Key": {
          "type": "string",
          "description": "Gets or sets the name of the key parameter."
        }
      }
    },
    "ExchangeTokenProvision": {
      "type": "object",
      "description": "Strongly typed configuration for provisioning options for exchanging short lived access tokens with long lived ones.",
      "properties": {
        "TokenHost": {
          "type": "string",
          "description": "Gets or sets the base URL of the service for exchanging an access token."
        },
        "RequestTokenPath": {
          "type": "string",
          "description": "Gets or sets the path of the service for exchanging an access token."
        },
        "TokenGrantType": {
          "type": "string",
          "description": "Gets or sets the grant type used with the exchange request."
        },
        "RequestRefreshTokenPath": {
          "type": "string",
          "description": "Gets or sets the path of the service for refreshing the access token."
        },
        "RefreshTokenGrantType": {
          "type": "string",
          "description": "Gets or set the grant type used for refreshing the access token."
        },
        "ExchangeTokenWhenExpiresWithin": {
          "type": "string",
          "description": "Gets or sets the time interval for expiration of exchange tokens."
        }
      }
    }
  }
}
