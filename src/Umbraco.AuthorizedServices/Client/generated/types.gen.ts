// This file is auto-generated by @hey-api/openapi-ts

export type AddApiKey = {
    alias: string;
    apiKey: string;
};

export type AddOAuth1Token = {
    alias: string;
    token: string;
    tokenSecret: string;
};

export type AddOAuth2Token = {
    alias: string;
    token: string;
};

export type AuthorizationResult = {
    readonly success: boolean;
    readonly errorMessage: string;
    readonly result?: string | null;
};

export type AuthorizedServiceDisplay = {
    alias: string;
    displayName: string;
    isAuthorized: boolean;
    canManuallyProvideToken: boolean;
    canManuallyProvideApiKey: boolean;
    authorizationUrl?: string | null;
    authenticationMethod: string;
    sampleRequest?: string | null;
    settings: {
        [key: string]: string;
    };
};

export type AuthorizedServiceTreeItemResponseModel = {
    unique: string;
    icon: string;
    name: string;
};

export enum EventMessageTypeModel {
    DEFAULT = 'Default',
    INFO = 'Info',
    ERROR = 'Error',
    SUCCESS = 'Success',
    WARNING = 'Warning'
}

export type GenerateToken = {
    alias: string;
};

export type NotificationHeaderModel = {
    message: string;
    category: string;
    type: EventMessageTypeModel;
};

export type PagedViewModel1 = {
    total: number;
    items: Array<AuthorizedServiceTreeItemResponseModel>;
};

export type RevokeAccess = {
    alias: string;
};

export type GenerateOAuth1RequestTokenData = {
    body?: GenerateToken;
    path?: never;
    query?: never;
    url: '/umbraco/authorized-services/management/api/v1/service';
};

export type GenerateOAuth1RequestTokenErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
};

export type GenerateOAuth1RequestTokenResponses = {
    /**
     * OK
     */
    200: string;
};

export type GenerateOAuth1RequestTokenResponse = GenerateOAuth1RequestTokenResponses[keyof GenerateOAuth1RequestTokenResponses];

export type GetByAliasData = {
    body?: never;
    path: {
        alias: string;
    };
    query?: never;
    url: '/umbraco/authorized-services/management/api/v1/service/{alias}';
};

export type GetByAliasErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
};

export type GetByAliasResponses = {
    /**
     * OK
     */
    200: AuthorizedServiceDisplay;
};

export type GetByAliasResponse = GetByAliasResponses[keyof GetByAliasResponses];

export type SendSampleRequestData = {
    body?: never;
    path: {
        alias: string;
    };
    query?: never;
    url: '/umbraco/authorized-services/management/api/v1/service/{alias}/sample-request';
};

export type SendSampleRequestErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type SendSampleRequestResponses = {
    /**
     * OK
     */
    200: string;
};

export type SendSampleRequestResponse = SendSampleRequestResponses[keyof SendSampleRequestResponses];

export type SaveApiKeyData = {
    body?: AddApiKey;
    path?: never;
    query?: never;
    url: '/umbraco/authorized-services/management/api/v1/service/api-key';
};

export type SaveApiKeyErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
};

export type SaveApiKeyResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type SaveOAuth1TokenData = {
    body?: AddOAuth1Token;
    path?: never;
    query?: never;
    url: '/umbraco/authorized-services/management/api/v1/service/oauth1';
};

export type SaveOAuth1TokenErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
};

export type SaveOAuth1TokenResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GenerateOAuth1RequestToken2Data = {
    body?: GenerateToken;
    path?: never;
    query?: never;
    url: '/umbraco/authorized-services/management/api/v1/service/oauth1/request-token';
};

export type GenerateOAuth1RequestToken2Errors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
};

export type GenerateOAuth1RequestToken2Responses = {
    /**
     * OK
     */
    200: string;
};

export type GenerateOAuth1RequestToken2Response = GenerateOAuth1RequestToken2Responses[keyof GenerateOAuth1RequestToken2Responses];

export type SaveOAuth2TokenData = {
    body?: AddOAuth2Token;
    path?: never;
    query?: never;
    url: '/umbraco/authorized-services/management/api/v1/service/oauth2';
};

export type SaveOAuth2TokenErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
};

export type SaveOAuth2TokenResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GenerateOAuth2ClientCredentialsTokenData = {
    body?: GenerateToken;
    path?: never;
    query?: never;
    url: '/umbraco/authorized-services/management/api/v1/service/oauth2/client-credentials';
};

export type GenerateOAuth2ClientCredentialsTokenErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
};

export type GenerateOAuth2ClientCredentialsTokenResponses = {
    /**
     * OK
     */
    200: AuthorizationResult;
};

export type GenerateOAuth2ClientCredentialsTokenResponse = GenerateOAuth2ClientCredentialsTokenResponses[keyof GenerateOAuth2ClientCredentialsTokenResponses];

export type RevokeAccessData = {
    body?: RevokeAccess;
    path?: never;
    query?: never;
    url: '/umbraco/authorized-services/management/api/v1/service/revoke';
};

export type RevokeAccessErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
};

export type RevokeAccessResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type RootData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        take?: number;
    };
    url: '/umbraco/authorized-services/management/api/v1/tree';
};

export type RootErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
};

export type RootResponses = {
    /**
     * OK
     */
    200: PagedViewModel1;
};

export type RootResponse = RootResponses[keyof RootResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:3010' | (string & {});
};