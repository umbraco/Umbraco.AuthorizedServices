// This file is auto-generated by @hey-api/openapi-ts

export type AddApiKey = {
    alias: string;
    apiKey: string;
};

export type AddOAuth1Token = {
    alias: string;
    token: string;
    tokenSecret: string;
};

export type AddOAuth2Token = {
    alias: string;
    token: string;
};

export type AuthorizationResult = {
    readonly success: boolean;
    readonly errorMessage: string;
    readonly result?: string | null;
};

export type AuthorizedServiceDisplay = {
    displayName: string;
    isAuthorized: boolean;
    canManuallyProvideToken: boolean;
    canManuallyProvideApiKey: boolean;
    authorizationUrl?: string | null;
    authenticationMethod: string;
    sampleRequest?: string | null;
    settings: {
        [key: string]: (string);
    };
};

export type AuthorizedServiceTreeItemResponseModel = {
    unique: string;
    icon: string;
    name: string;
};

export enum EventMessageTypeModel {
    DEFAULT = 'Default',
    INFO = 'Info',
    ERROR = 'Error',
    SUCCESS = 'Success',
    WARNING = 'Warning'
}

export type GenerateToken = {
    alias: string;
};

export type NotificationHeaderModel = {
    message: string;
    category: string;
    type: EventMessageTypeModel;
};

export type PagedViewModel_1 = {
    total: number;
    items: Array<(AuthorizedServiceTreeItemResponseModel)>;
};

export type RevokeAccess = {
    alias: string;
};

export type GenerateOauth1RequestTokenData = {
    requestBody?: GenerateToken;
};

export type GenerateOauth1RequestTokenResponse = string;

export type GetByAliasData = {
    alias: string;
};

export type GetByAliasResponse = AuthorizedServiceDisplay;

export type SendSampleRequestData = {
    alias: string;
};

export type SendSampleRequestResponse = string;

export type SaveApiKeyData = {
    requestBody?: AddApiKey;
};

export type SaveApiKeyResponse = string;

export type SaveOauth1TokenData = {
    requestBody?: AddOAuth1Token;
};

export type SaveOauth1TokenResponse = string;

export type GenerateOauth1RequestToken1Data = {
    requestBody?: GenerateToken;
};

export type GenerateOauth1RequestToken1Response = string;

export type SaveOauth2TokenData = {
    requestBody?: AddOAuth2Token;
};

export type SaveOauth2TokenResponse = string;

export type GenerateOauth2ClientCredentialsTokenData = {
    requestBody?: GenerateToken;
};

export type GenerateOauth2ClientCredentialsTokenResponse = AuthorizationResult;

export type RevokeAccessData = {
    requestBody?: RevokeAccess;
};

export type RevokeAccessResponse = string;

export type RootData = {
    skip?: number;
    take?: number;
};

export type RootResponse = PagedViewModel_1;

export type $OpenApiTs = {
    '/umbraco/authorized-services/management/api/v1/service': {
        post: {
            req: GenerateOauth1RequestTokenData;
            res: {
                /**
                 * OK
                 */
                200: string;
            };
        };
    };
    '/umbraco/authorized-services/management/api/v1/service/{alias}': {
        get: {
            req: GetByAliasData;
            res: {
                /**
                 * OK
                 */
                200: AuthorizedServiceDisplay;
            };
        };
    };
    '/umbraco/authorized-services/management/api/v1/service/{alias}/sample-request': {
        get: {
            req: SendSampleRequestData;
            res: {
                /**
                 * OK
                 */
                200: string;
                /**
                 * Internal Server Error
                 */
                500: unknown;
            };
        };
    };
    '/umbraco/authorized-services/management/api/v1/service/api-key': {
        post: {
            req: SaveApiKeyData;
            res: {
                /**
                 * OK
                 */
                200: string;
            };
        };
    };
    '/umbraco/authorized-services/management/api/v1/service/oauth1': {
        post: {
            req: SaveOauth1TokenData;
            res: {
                /**
                 * OK
                 */
                200: string;
            };
        };
    };
    '/umbraco/authorized-services/management/api/v1/service/oauth1/request-token': {
        post: {
            req: GenerateOauth1RequestToken1Data;
            res: {
                /**
                 * OK
                 */
                200: string;
            };
        };
    };
    '/umbraco/authorized-services/management/api/v1/service/oauth2': {
        post: {
            req: SaveOauth2TokenData;
            res: {
                /**
                 * OK
                 */
                200: string;
            };
        };
    };
    '/umbraco/authorized-services/management/api/v1/service/oauth2/client-credentials': {
        post: {
            req: GenerateOauth2ClientCredentialsTokenData;
            res: {
                /**
                 * OK
                 */
                200: AuthorizationResult;
            };
        };
    };
    '/umbraco/authorized-services/management/api/v1/service/revoke': {
        post: {
            req: RevokeAccessData;
            res: {
                /**
                 * OK
                 */
                200: string;
            };
        };
    };
    '/umbraco/authorized-services/management/api/v1/tree': {
        get: {
            req: RootData;
            res: {
                /**
                 * OK
                 */
                200: PagedViewModel_1;
            };
        };
    };
};