// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GenerateOAuth1RequestTokenData, GenerateOAuth1RequestTokenResponse, GetByAliasData, GetByAliasResponse, SendSampleRequestData, SendSampleRequestResponse, SaveApiKeyData, SaveOAuth1TokenData, GenerateOAuth1RequestToken2Data, GenerateOAuth1RequestToken2Response, SaveOAuth2TokenData, GenerateOAuth2ClientCredentialsTokenData, GenerateOAuth2ClientCredentialsTokenResponse, RevokeAccessData, RootData, RootResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class ServiceService {
    public static generateOAuth1RequestToken<ThrowOnError extends boolean = true>(options?: Options<GenerateOAuth1RequestTokenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<GenerateOAuth1RequestTokenResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/authorized-services/management/api/v1/service',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getByAlias<ThrowOnError extends boolean = true>(options: Options<GetByAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetByAliasResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/authorized-services/management/api/v1/service/{alias}',
            ...options
        });
    }
    
    public static sendSampleRequest<ThrowOnError extends boolean = true>(options: Options<SendSampleRequestData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<SendSampleRequestResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/authorized-services/management/api/v1/service/{alias}/sample-request',
            ...options
        });
    }
    
    public static saveApiKey<ThrowOnError extends boolean = true>(options?: Options<SaveApiKeyData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/authorized-services/management/api/v1/service/api-key',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static saveOAuth1Token<ThrowOnError extends boolean = true>(options?: Options<SaveOAuth1TokenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/authorized-services/management/api/v1/service/oauth1',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static generateOAuth1RequestToken2<ThrowOnError extends boolean = true>(options?: Options<GenerateOAuth1RequestToken2Data, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<GenerateOAuth1RequestToken2Response, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/authorized-services/management/api/v1/service/oauth1/request-token',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static saveOAuth2Token<ThrowOnError extends boolean = true>(options?: Options<SaveOAuth2TokenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/authorized-services/management/api/v1/service/oauth2',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static generateOAuth2ClientCredentialsToken<ThrowOnError extends boolean = true>(options?: Options<GenerateOAuth2ClientCredentialsTokenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<GenerateOAuth2ClientCredentialsTokenResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/authorized-services/management/api/v1/service/oauth2/client-credentials',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static revokeAccess<ThrowOnError extends boolean = true>(options?: Options<RevokeAccessData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/authorized-services/management/api/v1/service/revoke',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class TreeService {
    public static root<ThrowOnError extends boolean = true>(options?: Options<RootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<RootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/authorized-services/management/api/v1/tree',
            ...options
        });
    }
    
}