name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

parameters:
  - name: cache_nuget
    displayName: Cache NuGet packages
    type: boolean
    default: false

variables:
  nodeVersion: 18.x
  solution: Umbraco.AuthorizedServices.sln
  buildConfiguration: Release
  DOTNET_NOLOGO: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

stages: 
  - stage: Build
    variables:
      NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
      npm_config_cache: $(Pipeline.Workspace)/.npm_client
    jobs:
      - job: Build
        pool: 
          vmImage: ubuntu-latest
        steps:
          # Checkout source (avoid shallow clone to calculate version height)
          - checkout: self
            fetchDepth: 0

          # Setup build environment
          - task: NuGetAuthenticate@1
            displayName: Authenticate NuGet

          - task: NodeTool@0
            displayName: Use Node.js $(nodeVersion)
            inputs:
              versionSpec: $(nodeVersion)

          - task: UseDotNet@2
            displayName: Use .NET SDK from global.json
            inputs:
              useGlobalJson: true

          # Cache and restore NuGet packages
          - task: Cache@2
            condition: ${{ parameters.cache_nuget }}
            displayName: Cache NuGet packages
            inputs:
              key: 'nuget | "$(Agent.OS)" | **/packages.lock.json, !**/bin/**, !**/obj/**'
              restoreKeys: |
                nuget | "$(Agent.OS)"
                nuget
              path: $(NUGET_PACKAGES)

          - script: dotnet restore $(solution) --locked-mode
            displayName: Restore NuGet packages

          # Build - client          
          - task: Npm@1
            displayName: Run NPM install and build
            inputs:
              command: 'custom'
              workingDir: 'src/Umbraco.AuthorizedServices/Client'
              customCommand: 'npm run build:cicd'

          # Build
          - script: dotnet build $(solution) --configuration $(buildConfiguration) --no-restore -p:ContinuousIntegrationBuild=true
            displayName: Run dotnet build

          # Pack
          - script: dotnet pack $(solution) --configuration $(buildConfiguration) --no-restore --output $(Build.ArtifactStagingDirectory)/nupkg
            displayName: Run dotnet pack

          # Publish
          - task: PublishPipelineArtifact@1
            displayName: Publish NuGet packages
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)/nupkg
              artifactName: nupkg

          - task: PublishPipelineArtifact@1
            displayName: Publish build output
            inputs:
              targetPath: $(Build.SourcesDirectory)
              artifactName: build_output
  - stage: UnitTests
    displayName: Unit Tests
    dependsOn: Build
    jobs:
      - job: UnitTests
        displayName: Run Unit Tests
        pool:
          vmImage: 'windows-latest'
        steps:
          # Checkout source
          - checkout: self

          # Setup test environment
          - task: DownloadPipelineArtifact@2
            displayName: Download build artifacts
            inputs:
              artifact: build_output
              path: $(Build.SourcesDirectory)

          - task: UseDotNet@2
            displayName: Use .NET SDK from global.json
            inputs:
              useGlobalJson: true

          # Test
          - script: dotnet test $(solution) --configuration $(buildConfiguration) --no-build --logger trx --results-directory $(Build.ArtifactStagingDirectory)/tests
            displayName: Run dotnet test

          # Publish
          - task: PublishTestResults@2
            displayName: Publish test results
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: VSTest
              testResultsFiles: '*.trx'
              searchFolder: $(Build.ArtifactStagingDirectory)/tests
              testRunTitle: Unit Tests - $(Agent.OS)
              configuration: $(buildConfiguration)
